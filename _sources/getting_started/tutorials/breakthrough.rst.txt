CADET Introduction
==================

Performing a forward simulation comprises several steps: 
  * Setting up the model including all parameters and discretization 
  * Defining Sections and Switches 
  * Setting up the simulator and running the simulation 
  * Plotting results

In this tutorial we will build a simple forward simulation with a breakthrough of one component using the following system:

.. figure:: _images/breakthrough_system.png

For this purpose, we use :ref:`CADET-Python <cadet_python>`, a file based interface for CADET.
CADET still must be downloaded and built from https://github.com/modsim/CADET.  
The Python interface almost exactly maps to the documented CADET interface except that all dataset names are lowercase.
This simplifies using the interface.
The package includes a `Cadet` class which serves as a generic HDF5 interface.

As an example look at setting column porosity for column 1.
From the CADET manual the path for this is ``/input/model/unit_001/COL_POROSITY``.
In the python interface this becomes:

.. code-block:: Python3

    sim = Cadet()
    sim.root.input.model.unit_001.col_porosity = 0.33

0. Preliminary steps
--------------------

First, we need to import some libraries and specify the location of the ``cadet-cli``.
It is located in the ``bin`` folder where CADET was installed.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 2-7


To create the model and specify its parameters, we create an instance of the ``Cadet`` class.
In the ``root`` attribute of this object, the parameter structure is defined as described in the :ref:`manual <FFIntroduction>`.
It is implemented as a ``Dict`` of the ``addict`` package (see `here <https://github.com/mewwts/addict>`_).
This allows for creating arbitrary nested dictionaries using dot-notation.

**Important:** Note, that the ``Cadet`` class does not provide any sanity checks.
If parameters are misspelled or have the wrong dimensions, they are simply ignored which can cause problems later when the simulator is run.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 10


1. Setting up the model
-----------------------

Although the order of the parameter specification does not matter, it is reasonable to first specify the number of unit operations before we select the models and define the parameters.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 13 

The available models are listed in the :ref:`unit operation chapter <unit_operation_models>` of the manual.
The units for the different fields and quantities are given in the :ref:`file format chapter <unit_operation_config>`.

Inlet Model
~~~~~~~~~~~

In CADET, the ``INLET`` pseudo unit operation serves as source for the system and is used to create arbitary concentration profiles as boundary conditions.
First, we define an ``Inlet`` as the first unit operation by adding the field ``unit_000`` in the ``/input/model/`` group.
The concentration profile is described using a third degree piecewise polynomial (spline in the continuous case) for each component, where the pieces are given by the sections.
Later, we will define the polynomials, when we look at sections.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 16-18

General Rate Model
~~~~~~~~~~~~~~~~~~

We now add a second unit operation for the column model.
For the general rate model model, we set the ``unit_type`` parameter of the corresponding unit operation model to ``GENERAL_RATE_MODEL``.
In it, we set the parameters related with transport and column geometry.
For a more detailed description of the parameters and theis units, see also the :ref:`manual <general_rate_model_config>`.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 21-35 

Note that film, particle, and surface diffusion are all component-specific, i.e., they are vectors of length ``n_components``.

Adsorption Model
^^^^^^^^^^^^^^^^

Every unit operation can be associated with an adsorption model.
The available models are listed in the :ref:`bindings chapter <binding_models>` of the manual.

For the Langmuir model, we set the ``adsorption_model`` parameter of the corresponding unit operation model to ``MULTI_COMPONENT_LANGMUIR``.
Then, we decide if we want to use the rapid-equilibrium assumption in the binding model (``is_kinetic = False``), which is not the case here (dynamic binding).
Finally, the parameters of the binding models have to be set for each component (they are vectors of length ``n_components``).
They are described in the chapter on :ref:`file format specifications <FFAdsorption>` in the manual.
In case of the Langmuir model, we have to specify the parameters ``kA``, ``kD``, and ``qMAX``.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 38-42

Initial conditions
^^^^^^^^^^^^^^^^^^

Next, we specify the initial conditions (concentration of the components in the mobile and stationary phases) for the column.
These concentrations are entered as vectors where each entry gives the concentration for the corresponding component.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 45-46 

Setting up the discretization
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

There are some options for adapting the discretization.
However, the two most important ones are the number of grid cells in the column and the particles, which are also set in this examples.
For this purpose, the number of grid cells in the column ``ncol`` is set to ``20`` and the number of cells in the particle ``npar`` to ``5``.
These are rather low values to make the examples run faster, since they are only for educational purposes.
In practice, much higher values are expected (say 100-200 column cells and 16-32 particle cells).
Note that the used WENO method reduces the required amount of cells drastically compared to an upwind scheme.
Moreover, we have to specify the number of bound states for each component.
Finally, we set some other options for the discretization which usually do not need to be changed.  

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 49-67 

Outlet Model
~~~~~~~~~~~~

The ``OUTLET`` is another psuedo unit operation that serves as sink for the system.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 70-71 


2. Setting up Sections and Connections
--------------------------------------

:ref:`Sections <SimTimeSectionsTransitions>` are used to specify changes of parameter values during the simulation. A section typically corresponds to an operating step (load, wash, elute etc.), but can also be used to indicate changes in connectivity, or even discontinuities of :ref:`model
parameters <section_dependent_parameters>`.

In the ``/input/solver/sections/`` branch, ``nsec`` denotes the number of sections.
The start and end times of a section are given in the ``section_times`` vector.
It should always start at ``0`` and contains ``nsec + 1`` values, i.e., the ``i``\ th section goes from ``section_times[i]`` to ``section_times[i+1]``.

The ``section_continuity`` indicates whether a transition from one section to the next is continuous in both the inlet and the parameters.
It has ``nsec - 1`` number of values, since there is one less transition than there are sections.
The continuity is used in CADETâ€™s time integrator which needs to decide whether to restart on entering a new section.
If the transition is continuous, the time integrator can try to step over the transition without restarting, thus saving some computation time (since the restart is costly).
If you are unsure about the continuity, just leave it at ``0``.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 74-76  

As mentioned earlier, we now define the ``INLET`` profile using a third degree piecewise polynomial. On each section :math:`[ t_i, t_{i+1} ]` a cubic polynomial :math:`p_i` is defined:

.. math::

   p_i( t ) = d * (t - t_i)^3 + c * (t - t_i)^2 + b * (t - t_i) + a,

where the coefficients of the polynomial are ``const_coeff`` (a), ``lin_coeff`` (b), ``quad_coeff`` (c), and ``cube_coeff`` (d).
Note that the constant coefficient ``const_coeff`` determines the starting concentration on each section.
The stopping concentration is given by :math:`p_i( t_{i+1} )` or :math:`p_{i+1}( t_{i+1} )` in case of a continuous profile.
In this example, which has only one section, we define its coefficients by adding the field ``sec_000`` to the inlet unit (``unit_000``).
Since the column should be constantly fed with :math:`1.0 \cdot 10^{-3} mol / m^3` all the time, we set ``const_coeff`` to ``[1.0e-3]`` and all other cofficients to ``[0.0]``.
Note that for more components, a vector of coefficients needs to be specified.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 79-82 

In order to specify the :ref:`connectivity of the network <networks>`, we have to provide a matrix with list of connections in row-major storage.
Moreover, we have to specify the section in which the specified connectivity should be applied.

The columns are:

   ``[UnitOpID from, UnitOpID to, Component from, Component to, volumetric flow rate]``

Usually, ``Component from`` and ``Component to`` can be set to ``-1``, which will connect all components from the origin and destination unit operations.
Since CADET version 4.1, the flow rates can also be defined with piecewise cubic polynomials.
Also, for the 2D General rate model inlet ports need to be speciefied.
For more information on the parameters, see :ref:`here <FFModelSystemConnections>`.

In this case, we connect all components from ``unit_000`` to ``unit_001``, and from ``unit_001`` to ``unit_002``. 
Note that except for a ``CSTR`` model, the sum of all ingoing streams must equal the sum of all outgoing streams.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 85-89

3. Setting up the simulator and running the simulation
------------------------------------------------------

Before we can start the simulation, we have to specify some settings for the simulator.

First, we set define settings for the solver and the time integrator.
Usually, these only need to be adapted in special cases.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 92-105

Then, we have to specify which results should be written to the file after the simulation.
For this, we have to specify the ``/input/return/`` branch.
For more information, check the :ref:`manual <return>`.

Note, because ``return`` is a reserved keyword in Python, we cannot use dot-notation but have to use the â€˜properâ€™ dictionary indexing.

In this case, we want to write the solution of the inlet, and outlet of each unit operation, as well as for the bulk (only valid for the general rate model).

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 101-116 

Finally, we have to set the time points at which we want to evaluate the solution.
Note that the end time must not exceed the last section time specified in the model.
If the time points are not set explicitly, the time integrator outputs the solution at arbitrary time points between ``0`` and ``section_times[-1]``.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 118 

The last remaining step is to actually run the simulation.
For this, we have to specify a filename, save the configuration to ``H5``-format and call call the ``model``\ â€™s ``run()`` function.
We check if the simulation has completed successfully and load the results.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 122-132 

4. Plotting the results
-----------------------

The data is stored in the ``/output/`` branch of the Cadet object.
For more information, check the corresponding chapter in the :ref:`manual <FFOutput>`.

We then create a figure, plotting the outlet of the column over the simulation times.

.. literalinclude:: ../../examples/breakthrough.py
    :lines: 135-142

.. image:: _images/breakthrough_chromatogram.png


Exercises
---------

- Add a second inlet section from 10000s to 40000s in which no sample is fed into the column.
- Increase the length of the column and the flow rate
- Increase the desorption coefficient MCL_KD
- Add a second component

